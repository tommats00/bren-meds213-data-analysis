---
title: "Data Analaysis with the Arctic shorebird csv files"
format: html
---


```{r, message=FALSE}
library(tidyverse)
library(here)
library(lubridate)
library(RColorBrewer)
```


## Define path and filenames

```{r}
path_raw <- here("data","raw")

sites_csv <- "site.csv"

snowcover_csv <- "snow_cover.csv"

nests_csv <- "ASDN_Bird_nests.csv"

eggs_csv <- "ASDN_Bird_eggs.csv"

species_csv <- "species.csv"

lemmings_csv <- "ASDN_Daily_pred_lemm.csv"
```


## Question 1: Which shorebird species makes the most eggs?

### Import the data

```{r}
sites_data <- read_csv(here(path_raw, sites_csv))

eggs_data <- read_csv(here(path_raw, eggs_csv))

species_data <- read_csv(here(path_raw, species_csv))

nest_data <- read_csv(here(path_raw, nests_csv))
```


Let's compute the number of eggs per nest. The column `Egg-num` seems to be a good candidate to estimate the number of eggs per nest:

```{r}
eggs_sum <- eggs_data %>% 
  group_by(Site, Year, Nest_ID) %>% 
  summarize(Egg_count = max(Egg_num)) %>% # Decided to use max number of eggs, but could have counted the number of rows as well
  ungroup()
  
```

Then we can join with the nest table to bring the species information:

```{r}
nest_species <- eggs_sum %>%
  left_join(nest_data, join_by(Year, Site, Nest_ID))
  
```

Now we can group by species:

```{r}
nest_species_avg <- nest_species %>%
  group_by(Species) %>% 
  summarize(Avg_egg_count = mean(Egg_count))
  

nest_species_avg %>%  arrange(desc(Avg_egg_count))
```

Finally it would be better to have the name of the species and not only the 4-letter acronym:

```{r}
nest_species_avg <- nest_species_avg %>%
  left_join(species_data, join_by(Species == Code)) %>% 
  select(-c(Common_name, Relevance))

nest_species_avg
  
```

Let's put it all together:

```{r}
nest_species_avg %>% 
  select(-Relevance) %>%
  relocate(avg_egg_numb, .after = last_col()) %>%
  arrange(desc(avg_egg_numb))
```




## Question 2: Does the snow amount & timing impact the number of eggs? Is it species dependant?

Since the observations are made a different time, we will aggragate the data by month to have an common denominator in time.

### Summarize the nests table


Read the nest data in

```{r}
nests_data <- read_csv(here(path_raw, nests_csv))

glimpse(nests_data)
```

Yeah! `Date_found` is already in date format! We can thus directly aggregate the data by months:

```{r}
nests_month <- nests_data %>%
  mutate(Month = month(Date_found))
  
```

### Summarize the snow cover table

Read the snow cover data in

```{r}
snowcover_data <- read_csv(file.path(path_raw, snowcover_csv))

glimpse(snowcover_data)
```

The Date is stored as a character :/, we thus first we need to transform the date in date format before computing the monthly aggregate:

```{r}
snowcover_data_fixed <- snowcover_data %>%
  mutate(Date2 = as_date(Date)) # Will return NAs where it isn't a real date
  
```

We have 72 errors. Let's have a look at the date which failed:

```{r}
snowcover_data_fixed %>% 
  filter(is.na(Date2))

```


It is because 2 days were entered as one value `8&9 june 06`, it is not in the expected format

```{r}
snowcover_data_fixed <- snowcover_data_fixed %>%
  mutate(Date2 = ifelse(
    is.na(Date2),
    ymd("08/06/06"),
    Date
  ))
  
snowcover_data_fixed %>% filter(Date == "8&9 june 06")
```

Mmm the Dates are not what we were expecting... It generally means there are different date types. Let's start by fixing the problematic dates before transforming it to the date format.

```{r}
snowcover_data_fixed <- 
  
```


::: {.callout-note}
## Fun fact
You might be wondering why I started with `as_date()` instead of directly using `dmy()`. Well turns out that while preparing this exercise I discovered a bug in this `lubridate` function!! See <https://github.com/tidyverse/lubridate/issues/1161> for more information.
:::


Now let's compute the monthly statistics

```{r}
# adding the snow days with a threshold at 10%
snowcover_month <- snowcover_data_fixed %>%
  
```

 
### Join the snow cover and nest tables

Since now we have the months in common, we can use them to join our two datasets:

```{r}
nests_snow_month <- 
```

Well in the end we did not have much information by months (mainly 2 months per year focused on June and July), so let's aggregate by year instead:

```{r}
nests_snow_year <- nests_snow_month %>%
  
```

### Plots

```{r}
ggplot(nests_snow_year, aes(x=cum_snow_days, y=n_nest , color=Species)) + 
  geom_point() +
  scale_colour_brewer(palette = "Set3") +
  ggtitle("Number of eggs vs cummulative snow days") #+
  # facet_wrap(vars(Year), scales = "free")
```

```{r}
ggplot(nests_snow_year, aes(x=avg_snow_cover, y=n_nest , color=Species)) + 
  geom_point() +
  scale_colour_brewer(palette = "Set3")+ 
  ggtitle("Number of eggs vs avg snow cover")#+
  # facet_wrap(vars(Year), scales = "free")
```

What do you think is the answer to our question? 


